{"version":3,"sources":["routes/pages/component/Article/index.module.css","assets/img/ws.png","routes/pages/Home/index.js","routes/pages/component/Article/index.js","routes/pages/WebsocketUsecase/index.js","constants/routes.js","routes/DefaultLayout/index.js","constants/global.js","constants/color.js","routes/NotFound/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","article_body","__webpack_require__","p","Home","react_default","a","createElement","React","PureComponent","Article","this","props","className","Styles","children","Title","Paragraph","Text","WebsocketUsecase","option","language","lineNumbers","readonly","flask1","Codeflask","flask2","flask3","updateCode","Fragment","level","divider","src","IMG_WS","width","id","style","height","position","table","columns","dataIndex","title","dataSource","desc","pagination","size","event","handler","function","marginBottom","name","type","Article_Article","overflow","typography","renderParagraph1","renderParagraph2","renderParagraph3","renderParagraph4","menu","path","routeConfig","text","component","exact","SubMenu","Item","Sider","Header","App","state","isCollapse","contentHeight","document","documentElement","clientHeight","contentWidth","clientWidth","handleCollapseSider","_this","setState","renderMenuNode","list","map","_ref","key","react_router_dom","to","pathname","_this2","window","addEventListener","logoStyle","collapsed","minWidth","mode","theme","headerStyle","backgroundColor","iconType","icon","onClick","_this$state","routes","route","react_router","render","Object","assign","layout","renderSider","renderHeader","renderContent","Component","NotFound","browserHistory","createHashHistory","history","DefaultLayout","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,aAAA,oDCDlBF,EAAAC,QAAiBE,EAAAC,EAAuB,kTCEnBC,mLAEb,OAAOC,EAAAC,EAAAC,cAAA,kCAFmBC,IAAMC,oFCCnBC,mLAGb,OAAOL,EAAAC,EAAAC,cAAA,MAAUI,KAAKC,MAClBP,EAAAC,EAAAC,cAAA,OAAKM,UAAYC,IAAOb,cAClBU,KAAKC,MAAMG,kBALQP,IAAMC,yCCGnCO,YAAOC,gBAAWC,WAELC,8LAGb,IAAMC,EAAS,CAAEC,SAAU,KAAMC,aAAa,EAAMC,UAAU,GACxDC,EAAS,IAAIC,IAAU,gBAAiBL,GACxCM,EAAS,IAAID,IAAU,iBAAkBL,GACzCO,EAAS,IAAIF,IAAU,iBAAkBL,GA4F/CI,EAAOI,WA3FI,6OA4FXF,EAAOE,WAvFO,k7FAwFdD,EAAOC,WA1FO,mHA8Fd,OAAOvB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACHxB,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,gCACAzB,EAAAC,EAAAC,cAAAwB,EAAA,QACA1B,EAAAC,EAAAC,cAACU,EAAD,qLAGAZ,EAAAC,EAAAC,cAACU,EAAD,4iBAIAZ,EAAAC,EAAAC,cAACU,EAAD,sYAGAZ,EAAAC,EAAAC,cAACU,EAAD,KAAWZ,EAAAC,EAAAC,cAAA,OAAKyB,IAAMC,IAASC,MAAQ,sDAK3C,OAAO7B,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACHxB,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,gCACAzB,EAAAC,EAAAC,cAAAwB,EAAA,QACA1B,EAAAC,EAAAC,cAACW,EAAD,gJAAoDb,EAAAC,EAAAC,cAAA,WACpDF,EAAAC,EAAAC,cAACW,EAAD,wWAAuGb,EAAAC,EAAAC,cAAA,WACvGF,EAAAC,EAAAC,cAACW,EAAD,2IAA+Cb,EAAAC,EAAAC,cAAA,WAC/CF,EAAAC,EAAAC,cAACW,EAAD,+HAA6Cb,EAAAC,EAAAC,cAAA,WAC7CF,EAAAC,EAAAC,cAACW,EAAD,iJAAgDb,EAAAC,EAAAC,cAAA,WAChDF,EAAAC,EAAAC,cAACW,EAAD,wNAKJ,OAAOb,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACHxB,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,sCACAzB,EAAAC,EAAAC,cAAAwB,EAAA,QACA1B,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,mDACAzB,EAAAC,EAAAC,cAAA,OAAK4B,GAAK,eAAiBC,MAAQ,CAAEF,MAAO,OAAQG,OAAQ,IAAKC,SAAU,cAC3EjC,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,8BACAzB,EAAAC,EAAAC,cAAAgC,EAAA,GAAOC,QAAU,CAAC,CAAEC,UAAW,QAASC,MAAO,gBAAQ,CAAED,UAAW,OAAQC,MAAO,iBAC5EC,WAAa,CAAC,CAAE/B,MAAO,oBAAqBgC,KAAM,kFAC9C,CAAEhC,MAAO,GAAIgC,KAAM,8DACnB,CAAEhC,MAAO,GAAIgC,KAAM,kGACnB,CAAEhC,MAAO,GAAIgC,KAAM,0EACnB,CAAEhC,MAAO,GAAIgC,KAAM,8GACnB,CACIhC,MAAO,wBACPgC,KAAM,oOAGdC,YAAa,EAAQC,KAAK,UACjCzC,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,8BACAzB,EAAAC,EAAAC,cAAAgC,EAAA,GAAOM,YAAa,EAAQC,KAAK,QAC1BN,QAAU,CAAC,CAAEC,UAAW,QAASC,MAAO,gBACpC,CAAED,UAAW,UAAWC,MAAO,wCAC/B,CAAED,UAAW,OAAQC,MAAO,iBAChCC,WAAa,CAAC,CAAEI,MAAO,OAAQC,QAAS,gBAAiBJ,KAAM,8CAC3D,CAAEG,MAAO,UAAWC,QAAS,kBAAmBJ,KAAM,kFACtD,CAAEG,MAAO,QAASC,QAAS,iBAAkBJ,KAAM,0DACnD,CAAEG,MAAO,QAASC,QAAS,iBAAkBJ,KAAM,iDAC9DvC,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,8BACAzB,EAAAC,EAAAC,cAAAgC,EAAA,GAAOM,YAAa,EAAQC,KAAK,QAC1BN,QAAU,CAAC,CAAEC,UAAW,WAAYC,MAAO,gBAAQ,CAAED,UAAW,OAAQC,MAAO,iBAC/EC,WAAa,CAAC,CAAEM,SAAU,gBAAiBL,KAAM,oDAC7C,CAAEK,SAAU,iBAAkBL,KAAM,2EAKnD,OAAOvC,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACHxB,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,sCACAzB,EAAAC,EAAAC,cAAAwB,EAAA,QACA1B,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,mCACAzB,EAAAC,EAAAC,cAACU,EAAD,ugBAIAZ,EAAAC,EAAAC,cAACU,EAAD,wTAGAZ,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,sCACAzB,EAAAC,EAAAC,cAACU,EAAD,ovBAGAZ,EAAAC,EAAAC,cAAA,OAAK4B,GAAK,gBAAkBC,MAAQ,CAAEF,MAAO,OAAQG,OAAQ,KAAMC,SAAU,cAC7EjC,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,QACAzB,EAAAC,EAAAC,cAAA,OAAK4B,GAAK,gBACLC,MAAQ,CAAEF,MAAO,OAAQG,OAAQ,GAAIC,SAAU,WAAYY,aAAc,MAC9E7C,EAAAC,EAAAC,cAAAgC,EAAA,GAAOM,YAAa,EAAQC,KAAK,QAC1BN,QAAU,CAAC,CAAEC,UAAW,OAAQC,MAAO,gBACnC,CAAED,UAAW,OAAQC,MAAO,gBAC5B,CAAED,UAAW,OAAQC,MAAO,iBAChCC,WAAa,CAAC,CAAEQ,KAAM,YAAaP,KAAM,iCAASQ,KAAM,8BACpD,CAAED,KAAM,cAAeP,KAAM,uCAAUQ,KAAM,8BAC7C,CAAED,KAAM,eAAgBP,KAAM,yDAAaQ,KAAM,iCACjD,CAAED,KAAM,kBAAmBP,KAAM,yDAAaQ,KAAM,4BACpD,CAAED,KAAM,YAAaP,KAAM,+DAAmBQ,KAAM,4BACpD,CAAED,KAAM,YAAaP,KAAM,2BAAQQ,KAAM,iEAKlD,IACEf,EAAW1B,KAAKC,MAAhByB,OAER,OAAOhC,EAAAC,EAAAC,cAAC8C,EAAD,CAASjB,MAAQ,CAAEC,SAAQiB,SAAU,SACxCjD,EAAAC,EAAAC,cAAAgD,EAAA,OACIlD,EAAAC,EAAAC,cAACS,EAAD,CAAOc,MAAQ,GAAf,6DACEnB,KAAK6C,mBACL7C,KAAK8C,mBACL9C,KAAK+C,mBACL/C,KAAKgD,4BArNuBnD,IAAMC,eCLvCmD,EAAO,CAChB,CACIlB,MAAO,2BACPmB,KAAM,GACN9C,SAAU,CACN,CAAE2B,MAAO,wBAAemB,KAAM,yBAI7BC,EAAc,CACvB,CAAED,KAAM,IAAKE,KAAM,eAAMC,UAAW5D,EAAM6D,OAAO,GACjD,CAAEJ,KAAM,QAASE,KAAM,eAAMC,UAAW5D,EAAM6D,OAAO,GACrD,CAAEJ,KAAM,qBAAsBE,KAAM,wBAAeC,UAAW7C,EAAkB8C,OAAO,ICNnFC,cAASC,WACTC,YAAOC,aAmFAC,6MA7EXC,MAAQ,CACJC,YAAY,EACZC,cAAeC,SAASC,gBAAgBC,aACxCC,aAAcH,SAASC,gBAAgBG,eAW3CC,oBAAsB,kBAAMC,EAAKC,SAAS,CAAET,YAAaQ,EAAKT,MAAMC,gBAEpEU,eAAiB,SAAEC,GAAF,OAAYA,EAAKC,IAAI,SAAAC,GAAiC,IAA7BtE,EAA6BsE,EAA7BtE,SAAU2B,EAAmB2C,EAAnB3C,MAAOmB,EAAYwB,EAAZxB,KACvD,OAAI9C,EACOV,EAAAC,EAAAC,cAAC2D,EAAD,CAASoB,IAAM5C,EACNA,MAAQA,GAAUsC,EAAKE,eAAenE,IAEnDV,EAAAC,EAAAC,cAAC4D,EAAD,CAAMmB,IAAMzB,GACfxD,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAMC,GAAK,CAAEC,SAAU5B,IAAWnB,0FAhBrB,IAAAgD,EAAA/E,KAEjBgF,OAAOC,iBAAiB,SAAU,kBAAMF,EAAKT,SAAS,CAClDR,cAAeC,SAASC,gBAAgBC,aACxCC,aAAcH,SAASC,gBAAgBG,sDAkB3C,IAAMe,EAAY,CAAExD,OC3CU,ID4CtBmC,EAAe7D,KAAK4D,MAApBC,WACFtC,EAAQsC,EC3CoB,IADN,ID8C5B,OAAOnE,EAAAC,EAAAC,cAAC6D,EAAD,CAAOlC,MAAQA,EAAQ4D,UAAYtB,EAAapC,MAAQ,CAAE2D,SAAU,IACvE1F,EAAAC,EAAAC,cAAAqD,EAAA,GAAMoC,KAAK,SACLC,MAAM,QACR5F,EAAAC,EAAAC,cAAA,OAAK6B,MAAQyD,IACXlF,KAAKuE,eAAetB,4CAM9B,IAAMsC,EAAc,CAAE7D,OCzDQ,GDyDwB8D,gBE1DzC,QF2DPC,EAAWzF,KAAK4D,MAAMC,WAAa,YAAc,cAEvD,OAAOnE,EAAAC,EAAAC,cAAC8D,EAAD,CAAQjC,MAAQ8D,GACnB7F,EAAAC,EAAAC,cAAA8F,EAAA,GAAMjD,KAAOgD,EAAWE,QAAU3F,KAAKoE,+DAI9B,IAAAwB,EACuC5F,KAAK4D,MAAjDE,EADK8B,EACL9B,cAAeI,EADV0B,EACU1B,aAAcL,EADxB+B,EACwB/B,WAC/BnC,EAASoC,ECnEe,GDoExBvC,EAAQ2C,GAAgBL,EClEI,IADN,KDoEtBgC,EAAS1C,EAAYsB,IAAI,SAAAqB,GAAK,OAChCpG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOpB,IAAMmB,EAAM5C,KAAOA,KAAO4C,EAAM5C,KAAOI,MAAQwC,EAAMxC,MACrD0C,OAAS,SAAE/F,GAAF,OAAaP,EAAAC,EAAAC,cAACkG,EAAMzC,UAAP4C,OAAAC,OAAA,CAAiBxE,OAASA,EACTH,MAAQA,GACHtB,SAEvD,OAAOP,EAAAC,EAAAC,cAACmG,EAAA,EAAD,KACDF,EACFnG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAUlB,GAAG,+CAKjB,OAAOnF,EAAAC,EAAAC,cAAAuG,EAAA,GAAQjG,UAAU,WACnBF,KAAKoG,cACP1G,EAAAC,EAAAC,cAAAuG,EAAA,OACMnG,KAAKqG,eACLrG,KAAKsG,yBA1ELC,aGXGC,mLAEb,OAAM9G,EAAAC,EAAAC,cAAA,sEAFwBC,IAAMC,eCKtC2G,EAAiBC,cAeR/C,mLAXP,OAAOjE,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAQY,QAASF,GAChB/G,EAAAC,EAAAC,cAACmG,EAAA,EAAD,KACIrG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,KACIrG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOzC,OAAK,EAACD,UAAWuD,IACxBlH,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAO7C,KAAK,YAAYG,UAAWmD,cANzCD,aCGEM,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,gFCVNC,IAASjB,OAAOtG,EAAAC,EAAAC,cAACsH,EAAD,MAAQnD,SAASoD,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c5fdec1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"article_body\":\"Article_article_body__1MmxI\"};","module.exports = __webpack_public_path__ + \"static/media/ws.37927860.png\";","import React from 'react'\r\n\r\nexport default class Home extends React.PureComponent{\r\n    render() {\r\n        return <div>主页</div>\r\n    }\r\n}","import React from 'react'\r\nimport Styles from './index.module.css'\r\n\r\nexport default class Article extends React.PureComponent {\r\n    render () {\r\n\r\n        return <div { ...this.props }>\r\n            <div className={ Styles.article_body }>\r\n                { this.props.children }\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport Article from \"../component/Article\";\r\nimport { Typography, Divider, Table } from \"antd\";\r\nimport IMG_WS from '../../../assets/img/ws.png'\r\nimport Codeflask from 'codeflask'\r\n\r\nconst { Title, Paragraph, Text } = Typography\r\n\r\nexport default class WebsocketUsecase extends React.PureComponent {\r\n\r\n    componentDidMount () {\r\n        const option = { language: 'js', lineNumbers: true, readonly: true }\r\n        const flask1 = new Codeflask('#codeTextArea', option)\r\n        const flask2 = new Codeflask('#codeTextArea2', option)\r\n        const flask3 = new Codeflask('#codeTextArea3', option)\r\n        const code1 = `const Socket = new Websocket(url,[protocol])\r\n                     //url, 指定连接的 URL\r\n                     // protocol 是可选的，指定了可接受的子协议`\r\n        const code3 = 'const ws= new DataPointWebSocket (params)' +\r\n            '// 创建实例'\r\n        const code2 = '/***\\n' +\r\n            ' * websocket封装类\\n' +\r\n            ' * @author daopian\\n' +\r\n            ' * @param {Object} config - 配置对象\\n' +\r\n            ' * @param {String} config.type - 1:数据点 2:数据感知点\\n' +\r\n            ' * @param {String} config.id - 对应的数据点id\\n' +\r\n            ' * @example const ws =new DataPointWebSocket(config)\\n' +\r\n            ' *          now you can use ws to subscribe and unsubscribe\\n' +\r\n            ' */\\n' +\r\n            'export class DataPointWebSocket {\\n' +\r\n            '  constructor (config) {\\n' +\r\n            '    this.params = config || {}\\n' +\r\n            '    this.clearable = false\\n' +\r\n            '    this.connect() // 初始化\\n' +\r\n            '  }\\n' +\r\n            '  heartCheck = { // 心跳检测\\n' +\r\n            '    context: this,\\n' +\r\n            '    timeout: 60000,\\n' +\r\n            '    timeoutObj: null,\\n' +\r\n            '    start: function () {\\n' +\r\n            '      const timeout = this.timeout\\n' +\r\n            '      const websocket = this.context.ws\\n' +\r\n            '      this.timeoutObj = setTimeout(() => { // 一分钟无数据推送时检测连接是否正常，若不正常会触发ws的close事件\\n' +\r\n            '        websocket.send(\\'HeartBeat\\')\\n' +\r\n            '        this.reset()\\n' +\r\n            '      }, timeout)\\n' +\r\n            '    },\\n' +\r\n            '    reset: function () {\\n' +\r\n            '      this.stop()\\n' +\r\n            '      this.start()\\n' +\r\n            '    },\\n' +\r\n            '    stop: function () {\\n' +\r\n            '      window.clearTimeout(this.timeoutObj)\\n' +\r\n            '    }\\n' +\r\n            '  }\\n' +\r\n            '  connect () { // 发起连接并绑定事件\\n' +\r\n            '    window.WebSocket = window.WebSocket || window.MozWebSocket\\n' +\r\n            '    if (!window.WebSocket) { // 检测浏览器支持\\n' +\r\n            '      console.error(\\'错误: 浏览器不支持websocket\\')\\n' +\r\n            '      return\\n' +\r\n            '    }\\n' +\r\n            '    const {type, id} = this.params\\n' +\r\n            '    const url = baseUrl + \\'type=\\' + type + \\'&id=\\' + id\\n' +\r\n            '    this.ws = new WebSocket(url)\\n' +\r\n            '    this.ws.onopen = (ev) => {\\n' +\r\n            '      this.heartCheck.start()  //开始心跳检测\\n' +\r\n            '      this.onOpen(ev)\\n' +\r\n            '    }\\n' +\r\n            '    this.ws.onerror = (ev) => {\\n' +\r\n            '      this.onError(ev)\\n' +\r\n            '      this.reconnect()\\n' +\r\n            '    }\\n' +\r\n            '    this.ws.onclose = () => { // 心跳重连时会主动触发onclose\\n' +\r\n            '      this.heartCheck.stop()\\n' +\r\n            '      this.reconnect()\\n' +\r\n            '    }\\n' +\r\n            '    this.ws.onmessage = (message) => {\\n' +\r\n            '      this.heartCheck.reset()\\n' +\r\n            '      const {value} = JSON.parse(message.data)\\n' +\r\n            '      this.subscribe(value)\\n' +\r\n            '    }\\n' +\r\n            '  }\\n' +\r\n            '  reconnect () { // 重连\\n' +\r\n            '    if (this.ws.readyState === WebSocket.CLOSED || this.ws.readyState === WebSocket.CLOSING) { // 当ws状态已关闭或正在关闭\\n' +\r\n            '      if (!this.clearable) {\\n' +\r\n            '        this.connect() //\\n' +\r\n            '      } else {\\n' +\r\n            '        this.clearable = false\\n' +\r\n            '      }\\n' +\r\n            '    }\\n' +\r\n            '  }\\n' +\r\n            '  onOpen (ev) { // 连接成功的回调\\n' +\r\n            '  }\\n' +\r\n            '  onError (ev) { // 发生错误的回调\\n' +\r\n            '  }\\n' +\r\n            '  subscribe (value) { // 订阅数据更新\\n' +\r\n            '  }\\n' +\r\n            '  unsubscribe () { // 取消订阅\\n' +\r\n            '    this.clearable = true\\n' +\r\n            '    this.ws.close()\\n' +\r\n            '  }\\n' +\r\n            '  update (params) { // 更新参数\\n' +\r\n            '    this.params = params\\n' +\r\n            '    return this // 为链式调用\\n' +\r\n            '  }\\n' +\r\n            '}'\r\n        flask1.updateCode(code1)\r\n        flask2.updateCode(code2)\r\n        flask3.updateCode(code3)\r\n    }\r\n\r\n    renderParagraph1 () {\r\n        return <React.Fragment>\r\n            <Title level={ 3 }>一.websocket简介</Title>\r\n            <Divider/>\r\n            <Paragraph>\r\n                WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\r\n            </Paragraph>\r\n            <Paragraph>\r\n                WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API\r\n                中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\r\n            </Paragraph>\r\n            <Paragraph>\r\n                在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。\r\n            </Paragraph>\r\n            <Paragraph><img src={ IMG_WS } width={ '100%' }/></Paragraph>\r\n        </React.Fragment>\r\n    }\r\n\r\n    renderParagraph2 () {\r\n        return <React.Fragment>\r\n            <Title level={ 3 }>二.websocket特点</Title>\r\n            <Divider/>\r\n            <Text>1.&nbsp;&nbsp;建立在 TCP 协议之上，服务器端的实现比较容易。</Text><br/>\r\n            <Text>2.&nbsp;&nbsp;与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</Text><br/>\r\n            <Text>3.&nbsp;&nbsp;数据格式比较轻量，性能开销小，通信高效。</Text><br/>\r\n            <Text>4.&nbsp;&nbsp;可以发送文本，也可以发送二进制数据。</Text><br/>\r\n            <Text>5.&nbsp;&nbsp;没有同源限制，客户端可以与任意服务器通信。</Text><br/>\r\n            <Text>6.&nbsp;&nbsp;协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</Text>\r\n        </React.Fragment>\r\n    }\r\n\r\n    renderParagraph3 () {\r\n        return <React.Fragment>\r\n            <Title level={ 3 }>三.websocket的使用</Title>\r\n            <Divider/>\r\n            <Title level={ 4 }>1）创建websocket对象-Socket</Title>\r\n            <div id={ 'codeTextArea' } style={ { width: '100%', height: 100, position: 'relative' } }/>\r\n            <Title level={ 4 }>2）Socket 属性</Title>\r\n            <Table columns={ [{ dataIndex: 'props', title: '属性' }, { dataIndex: 'desc', title: '描述' }] }\r\n                   dataSource={ [{ props: 'Socket.readyState', desc: '只读属性 readyState 表示连接状态。' },\r\n                       { props: '', desc: '0 - 表示连接尚未建立。' },\r\n                       { props: '', desc: '1 - 表示连接已建立，可以进行通信。' },\r\n                       { props: '', desc: '2 - 表示连接正在进行关闭。' },\r\n                       { props: '', desc: '3 - 表示连接已经关闭或者连接不能打开。' },\r\n                       {\r\n                           props: 'Socket.bufferedAmount',\r\n                           desc: '只读属性 bufferedAmount 已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。'\r\n                       },\r\n                   ] }\r\n                   pagination={ false } size='small'/>\r\n            <Title level={ 4 }>3）Socket 事件</Title>\r\n            <Table pagination={ false } size='small'\r\n                   columns={ [{ dataIndex: 'event', title: '事件' },\r\n                       { dataIndex: 'handler', title: '事件处理程序' },\r\n                       { dataIndex: 'desc', title: '描述' }] }\r\n                   dataSource={ [{ event: 'open', handler: 'Socket.onopen', desc: '连接建立时触发' },\r\n                       { event: 'message', handler: 'Socket.onmesage', desc: '客户端接收服务端数据时触发' },\r\n                       { event: 'error', handler: 'Socket.onerror', desc: '通信发生错误时触发' },\r\n                       { event: 'close', handler: 'Socket.onclose', desc: '连接关闭时触发' }] }/>\r\n            <Title level={ 4 }>4）Socket 方法</Title>\r\n            <Table pagination={ false } size='small'\r\n                   columns={ [{ dataIndex: 'function', title: '方法' }, { dataIndex: 'desc', title: '描述' }] }\r\n                   dataSource={ [{ function: 'Socket.send()', desc: '使用连接发送数据' },\r\n                       { function: 'Socket.close()', desc: '关闭连接' }] }/>\r\n        </React.Fragment>\r\n    }\r\n\r\n    renderParagraph4 () {\r\n        return <React.Fragment>\r\n            <Title level={ 3 }>三.websocket的使用</Title>\r\n            <Divider/>\r\n            <Title level={ 4 }>1）心跳重连</Title>\r\n            <Paragraph>\r\n                在使用Websocket过程中, 可能会出现网络断开的情况, 比如信号不好, 或者网络临时性关闭, 这时候Websocket的连接已经断开, 而浏览器不会触发websocket的onclose方法,\r\n                我们无法知道是否断开连接, 也就无法进行重连操作。\r\n            </Paragraph>\r\n            <Paragraph>\r\n                如果在这种情况下向后端发送数据, onclose便会触发, 这时候便可进行绑定好的重连操作.因此websocket心跳重连就应运而生了。\r\n            </Paragraph>\r\n            <Title level={ 4 }>2）websocket的封装</Title>\r\n            <Paragraph>\r\n                为了方便在项目中使用，作者已经整合了心跳重连及一些基础绑定操作，使用者在使用时可将精力聚焦在数据响应的处理上，无需再考虑心跳重连及基础操作。使用者使用对象时需订阅数据，在退出界面时应关闭连接即取消订阅，对于参数改变使用update方法更新参数。代码持续优化中...\r\n            </Paragraph>\r\n            <div id={ 'codeTextArea2' } style={ { width: '100%', height: 1760, position: 'relative' } }/>\r\n            <Title level={ 4 }>API:</Title>\r\n            <div id={ 'codeTextArea3' }\r\n                 style={ { width: '100%', height: 50, position: 'relative', marginBottom: 20 } }/>\r\n            <Table pagination={ false } size='small'\r\n                   columns={ [{ dataIndex: 'name', title: '名称' },\r\n                       { dataIndex: 'desc', title: '说明' },\r\n                       { dataIndex: 'type', title: '类型' }] }\r\n                   dataSource={ [{ name: 'ws.onOpen', desc: '创建连接时', type: 'function(ev)--回调' },\r\n                       { name: 'ws.onError ', desc: '连接出现问题', type: 'function(ev)--回调' },\r\n                       { name: 'ws.subscribe', desc: '订阅，响应后端响应', type: 'function(value)--回调' },\r\n                       { name: 'ws.unsubscribe ', desc: '取消订阅，关闭连接', type: 'function()--方法' },\r\n                       { name: 'ws.update', desc: '更新对象，参数（params）', type: 'function()--方法' },\r\n                       { name: 'ws.update', desc: '手动重连', type: 'function()--方法' }] }/>\r\n        </React.Fragment>\r\n    }\r\n\r\n\r\n    render () {\r\n        const { height } = this.props\r\n\r\n        return <Article style={ { height, overflow: 'auto' } }>\r\n            <Typography>\r\n                <Title level={ 2 }>websocket项目初级方案沉淀</Title>\r\n                { this.renderParagraph1() }\r\n                { this.renderParagraph2() }\r\n                { this.renderParagraph3() }\r\n                { this.renderParagraph4() }\r\n            </Typography>\r\n        </Article>\r\n    }\r\n\r\n}","import Home from \"../routes/pages/Home\";\r\nimport WebsocketUsecase from \"../routes/pages/WebsocketUsecase\";\r\n\r\nexport const menu = [\r\n    {\r\n        title: '技术总结',\r\n        path: '',\r\n        children: [\r\n            { title: 'websocket使用', path: '/summary/websocket' }\r\n        ]\r\n    }\r\n]\r\nexport const routeConfig = [\r\n    { path: '/', text: '主页', component: Home, exact: true },\r\n    { path: '/home', text: '主页', component: Home, exact: true },\r\n    { path: '/summary/websocket', text: 'websocket使用', component: WebsocketUsecase, exact: true },\r\n]","import React, { Component } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport { Layout, Menu, Icon } from 'antd'\r\nimport { menu, routeConfig } from '../../../src/constants/routes'\r\nimport { V_LAYOUT_HEADER_HEIGHT, V_LAYOUT_SIDER_SMALL_WIDTH, V_LAYOUT_SIDER_WIDTH } from \"../../constants/global\";\r\nimport { WHITE } from \"../../constants/color\";\r\n\r\n\r\nconst { SubMenu, Item } = Menu\r\nconst { Sider, Header } = Layout\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n    state = {\r\n        isCollapse: false,\r\n        contentHeight: document.documentElement.clientHeight,// 可视区域的高度\r\n        contentWidth: document.documentElement.clientWidth // 可视区域的宽度\r\n    }\r\n\r\n    componentDidMount () {\r\n        // 修改窗口大小时 更新显示区域的展示\r\n        window.addEventListener('resize', () => this.setState({\r\n            contentHeight: document.documentElement.clientHeight,\r\n            contentWidth: document.documentElement.clientWidth\r\n        }))\r\n    }\r\n\r\n    handleCollapseSider = () => this.setState({ isCollapse: !this.state.isCollapse })\r\n\r\n    renderMenuNode = ( list ) => list.map(( { children, title, path } ) => {\r\n        if (children) {\r\n            return <SubMenu key={ title }\r\n                            title={ title }>{ this.renderMenuNode(children) }</SubMenu>\r\n        }\r\n        return <Item key={ path }>\r\n            <Link to={ { pathname: path } }>{ title }</Link>\r\n        </Item>\r\n    })\r\n\r\n\r\n    renderSider () {\r\n        const logoStyle = { height: V_LAYOUT_HEADER_HEIGHT }\r\n        const { isCollapse } = this.state\r\n        const width = isCollapse ? V_LAYOUT_SIDER_SMALL_WIDTH : V_LAYOUT_SIDER_WIDTH\r\n\r\n        return <Sider width={ width } collapsed={ isCollapse } style={ { minWidth: 0 } }>\r\n            <Menu mode='inline'\r\n                  theme='dark'>\r\n                <div style={ logoStyle }/>\r\n                { this.renderMenuNode(menu) }\r\n            </Menu>\r\n        </Sider>\r\n    }\r\n\r\n    renderHeader () {\r\n        const headerStyle = { height: V_LAYOUT_HEADER_HEIGHT, backgroundColor: WHITE }\r\n        const iconType = this.state.isCollapse ? 'menu-fold' : 'menu-unfold'\r\n\r\n        return <Header style={ headerStyle }>\r\n            <Icon type={ iconType } onClick={ this.handleCollapseSider }/>\r\n        </Header>\r\n    }\r\n\r\n    renderContent () {\r\n        const { contentHeight, contentWidth, isCollapse } = this.state\r\n        const height = contentHeight - V_LAYOUT_HEADER_HEIGHT\r\n        const width = contentWidth - (isCollapse ? V_LAYOUT_SIDER_SMALL_WIDTH : V_LAYOUT_SIDER_WIDTH)\r\n        const routes = routeConfig.map(route =>\r\n            <Route key={ route.path } path={ route.path } exact={ route.exact }\r\n                   render={ ( props ) => <route.component height={ height }\r\n                                                          width={ width }\r\n                                                          { ...props }/> }/>)\r\n\r\n        return <Switch>\r\n            { routes }\r\n            <Redirect to='notFound'/>\r\n        </Switch>\r\n    }\r\n\r\n    render () {\r\n        return <Layout className='height1'>\r\n            { this.renderSider() }\r\n            <Layout>\r\n                { this.renderHeader() }\r\n                { this.renderContent() }\r\n            </Layout>\r\n        </Layout>\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// V - value\r\nexport const V_LAYOUT_HEADER_HEIGHT = 40 // 顶部高度\r\nexport const V_LAYOUT_SIDER_WIDTH = 200 // 左侧菜单栏宽度\r\nexport const V_LAYOUT_SIDER_SMALL_WIDTH = 160 // 左侧菜单栏收缩宽度\r\n\r\n// K - key\r\n","export const WHITE = '#FFF'\r\nexport const RED_6 = \"#\"","import React from 'react'\r\n\r\nexport default class NotFound extends React.PureComponent{\r\n    render() {\r\n        return<div>页面走丢了。。。</div>\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Router, Switch, Route} from 'react-router'\r\nimport {createHashHistory} from 'history'\r\nimport DefaultLayout from \"./routes/DefaultLayout\";\r\nimport NotFound from \"./routes/NotFound\";\r\n\r\n\r\nconst browserHistory = createHashHistory()\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <Router history={browserHistory}>\r\n                <Switch>\r\n                    <Switch>\r\n                        <Route exact component={DefaultLayout}/>\r\n                        <Route path='/notFound' component={NotFound}/>\r\n                    </Switch>\r\n                </Switch>\r\n        </Router>\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'normalize.css'\r\nimport './assets/css/property.css'\r\nimport './assets/css/basic.css'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}